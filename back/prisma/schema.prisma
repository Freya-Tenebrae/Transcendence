generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int @unique @id @default(autoincrement())
  name                        String?
  surname                     String?
  nickname                    String? @unique
  email                       String? @unique
  admin                       Int @default(0)
  password                    Pass?
  pathAvatar                 String @default("https://i.imgur.com/5T0p5kr.jpg")
  elo                       	Int @default(1000)
  player1Matches              Game[] @relation("player1")
  player2Matches              Game[] @relation("player2")
  channelsMessages            ChannelMessage[]
  isMemberOf                  IsMemberOf[]
  PrivateMessages1            PrivateMessage[] @relation("user1")
  PrivateMessages2            PrivateMessage[] @relation("user2")
  Friend1                     Friend[] @relation("user1")
  Friend2                     Friend[] @relation("user2")
  Blocked1                    Blocked[] @relation("user1")
  Blocked2                    Blocked[] @relation("user2")
  Archivement                 ArchivementDone[] @relation("user")
  heartbeat					  DateTime @db.Timestamp @default(now())
}

model Pass {
  user                       User    @relation(fields: [id], references: [id])
  id                         Int     @unique
  salted_password            String?
  salt                       String?
  oAuth42Link                String?// check OAuth42 ???
  googleAuthLink             String?// check GoogleAuth ???
  OTPSecret					 String?
  OTPToken					 String?
}

model Channel {
  id                      Int @unique @id @default(autoincrement())
  name                    String @unique
  pathImage               String @default("https://i.imgur.com/RDB9iMH.jpg")
  privacy                 Boolean @default(false)
  password                String @default("")
  salt                    String @default("")
  creation                DateTime @default(now())

  message                 ChannelMessage[]
  isMemberOf              IsMemberOf[]
}

model Archivement {
  id                  Int @unique @id @default(autoincrement())
  name                String @unique
  description         String
  pathImg             String
  Users               ArchivementDone[] @relation("archivement") 
}

model Game {
  id                        Int @unique @id @default(autoincrement())
  user1                     User @relation(fields: [userId1], references: [id], name: "player1")
  userId1                   Int
  user2                     User @relation(fields: [userId2], references: [id], name: "player2")
  userId2                   Int
  isRanked                  Boolean @default(false)
  scoreUser1                Int @default(0)
  scoreUser2                Int @default(0)
  isOver                    Boolean @default(false)
  date                      DateTime @default(now())
}

model Friend {
  user1                    User @relation(fields: [userId1], references: [id], name: "user1")
  userId1                  Int
  user2                    User @relation(fields: [userId2], references: [id], name: "user2")
  userId2                  Int
  accepted                 Boolean @default(false)

  @@unique([userId1, userId2])
}

model Blocked {
  user1                   User @relation(fields: [userId1], references: [id], name: "user1")
  userId1                 Int
  user2                   User @relation(fields: [userId2], references: [id], name: "user2")
  userId2                 Int

  @@unique([userId1, userId2])
}

model IsMemberOf {
  user                 User @relation(fields: [userId], references: [id])
  userId               Int
  channel              Channel @relation(fields: [channelId], references: [id])
  channelId            Int
  status               String @default("INVITED") // "OWNER", "ADMIN", "MEMBER", "INVITED", "MUTE", "BAN"
  dateJoined           DateTime @default(now())

  @@unique([userId, channelId])
}

model ChannelMessage {
  user             User @relation(fields: [userId], references: [id])
  userId           Int
  channel          Channel @relation(fields: [channelId], references: [id])
  channelId        Int
  date             DateTime @default(now())
  content          String

  @@unique([userId, channelId, date])
}

model PrivateMessage {
  user1            User @relation(fields: [userId1], references: [id], name: "user1")
  userId1          Int
  user2            User @relation(fields: [userId2], references: [id], name: "user2")
  userId2          Int
  date             DateTime @default(now())
  content          String

  @@unique([userId1, userId2, date])
}

model ArchivementDone {
  user            User @relation(fields: [userId], references: [id], name: "user")
  userId          Int
  archivement     Archivement @relation(fields: [archivementId], references: [id], name: "archivement")
  archivementId   Int
  date            DateTime @default(now())

  @@unique([userId, archivementId])
}
